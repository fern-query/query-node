/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import { QueryApi } from "@fern-api/query";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as core from "../../../../core";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment: environments.QueryApiEnvironment | string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * @throws {QueryApi.BadRequestError}
     * @throws {QueryApi.UnauthorizedError}
     */
    public async create(request: QueryApi.CreateQueryRequest): Promise<QueryApi.Query> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/queries"),
            method: "POST",
            body: await serializers.CreateQueryRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.Query.parse(_response.body as serializers.Query.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new QueryApi.BadRequestError();
                case 401:
                    throw new QueryApi.UnauthorizedError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {QueryApi.NotFoundError}
     * @throws {QueryApi.UnauthorizedError}
     */
    public async get(queryId: string): Promise<QueryApi.Query> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/queries/${queryId}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.Query.parse(_response.body as serializers.Query.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new QueryApi.NotFoundError();
                case 401:
                    throw new QueryApi.UnauthorizedError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {QueryApi.BadRequestError}
     * @throws {QueryApi.UnauthorizedError}
     */
    public async list(request: QueryApi.ListQueriesRequest = {}): Promise<QueryApi.QueriesPage> {
        const { limit, page, sort, expand } = request;
        const _queryParams = new URLSearchParams();
        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (sort != null) {
            _queryParams.append("sort", sort.toString());
        }

        if (expand != null) {
            _queryParams.append("expand", expand);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/v1/queries"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.QueriesPage.parse(_response.body as serializers.QueriesPage.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new QueryApi.BadRequestError();
                case 401:
                    throw new QueryApi.UnauthorizedError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {QueryApi.BadRequestError}
     * @throws {QueryApi.UnauthorizedError}
     * @throws {QueryApi.NotFoundError}
     */
    public async update(queryId: string, request: QueryApi.UpdateQueryRequest): Promise<QueryApi.Query> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/queries/${queryId}`),
            method: "PATCH",
            body: await serializers.UpdateQueryRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.Query.parse(_response.body as serializers.Query.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new QueryApi.BadRequestError();
                case 401:
                    throw new QueryApi.UnauthorizedError();
                case 404:
                    throw new QueryApi.NotFoundError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {QueryApi.UnauthorizedError}
     * @throws {QueryApi.NotFoundError}
     */
    public async delete(queryId: string): Promise<QueryApi.Query> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/v1/queries/${queryId}`),
            method: "POST",
        });
        if (_response.ok) {
            return await serializers.Query.parse(_response.body as serializers.Query.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new QueryApi.UnauthorizedError();
                case 404:
                    throw new QueryApi.NotFoundError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
