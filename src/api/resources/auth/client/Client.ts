/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import { QueryApi } from "@fern-api/query";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as core from "../../../../core";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.QueryApiEnvironment | string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    public async loginWithEmail(request: QueryApi.LoginWithEmailRequest): Promise<void> {
        const { redirect, ..._body } = request;
        const _queryParams = new URLSearchParams();
        if (redirect != null) {
            _queryParams.append("redirect", redirect);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.QueryApiEnvironment.Production,
                "/ajax/auth/login/email"
            ),
            method: "POST",
            queryParameters: _queryParams,
            body: await serializers.LoginWithEmailRequest.json(_body),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.QueryApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {QueryApi.UnauthorizedError}
     */
    public async recycle(request: QueryApi.RecycleRequest): Promise<QueryApi.RecycleResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.QueryApiEnvironment.Production, "/ajax/auth/recycle"),
            method: "POST",
            body: await serializers.RecycleRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.RecycleResponse.parse(_response.body as serializers.RecycleResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new QueryApi.UnauthorizedError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {QueryApi.UnauthorizedError}
     */
    public async getUser(): Promise<string> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.QueryApiEnvironment.Production, "/ajax/auth/user"),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.auth.getUser.Response.parse(
                _response.body as serializers.auth.getUser.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new QueryApi.UnauthorizedError();
                default:
                    throw new errors.QueryApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.QueryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.QueryApiTimeoutError();
            case "unknown":
                throw new errors.QueryApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
