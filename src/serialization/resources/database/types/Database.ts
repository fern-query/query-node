/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { QueryApi } from "@fern-api/query";
import * as core from "../../../../core";

export const Database: core.serialization.ObjectSchema<serializers.Database.Raw, QueryApi.Database> = core.serialization
    .object({
        user: core.serialization.lazyObject(async () => (await import("../../..")).User),
        name: core.serialization.string(),
        description: core.serialization.string().optional(),
        image: core.serialization.string().optional(),
        public: core.serialization.boolean(),
        sourceDetails: core.serialization.property(
            "source_details",
            core.serialization.lazyObject(async () => (await import("../../..")).SourceDetails).optional()
        ),
        schemaVersion: core.serialization.property("schema_version", core.serialization.number()),
        tables: core.serialization.record(
            core.serialization.string(),
            core.serialization.lazy(async () => (await import("../../..")).Table)
        ),
        exampleQuestions: core.serialization.property(
            "example_questions",
            core.serialization.list(core.serialization.string())
        ),
        lastSynced: core.serialization.property("last_synced", core.serialization.number()),
        source: core.serialization.string(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../..")).Resource));

export declare namespace Database {
    interface Raw extends serializers.Resource.Raw {
        user: serializers.User.Raw;
        name: string;
        description?: string | null;
        image?: string | null;
        public: boolean;
        source_details?: serializers.SourceDetails.Raw | null;
        schema_version: number;
        tables: Record<string, serializers.Table.Raw>;
        example_questions: string[];
        last_synced: number;
        source: string;
    }
}
